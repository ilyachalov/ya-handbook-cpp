#include <iostream>

enum class Color
{
    White,
    Red,
    Orange,
    Blue,
};

struct Point
{
    double x{ 0.0 }; // координаты точки в трехмерном пространстве
    double y{ 0.0 };
    double z{ 0.0 };
    Color color;     // цвет точки
};

int main()
{
    // нижеприведенная инициализация объектов point3 и point4 введена
    // со стандарта C++20 и называется designated initializers,
    // по-русски это что-то вроде «подписанные инициализаторы», так как
    // каждое значение подписано (обозначено) названием соответствующего
    // поля структуры

    // таким образом, для компиляции требуется указать для компилятора
    // параметр с нужным стандартом, а именно: /std:c++20 для MSVC

    // порядок инициализаторов должен соответствовать порядку полей в структуре,
    // если какие-либо поля пропущены, они инициализируются значением по
    // умолчанию, обычно — нулевым; например, для объекта point3 поле
    // color не указано, поэтому оно будет инициализировано значением
    // Color::White, так как это нулевое значение в перечислении Color

    Point point3{ .x{ 1.4 }, .y{ -2.2 }, .z{ -3.98 } };
    Point point4{ .color{ Color::Orange } };

    std::cout << point3.x << ' ' << point3.y << ' ' << point3.z
              << ", " << static_cast<int>(point3.color) << '\n';
    
    std::cout << point4.x << ' ' << point4.y << ' ' << point4.z
              << ", " << static_cast<int>(point4.color) << '\n';

    return 0;
}